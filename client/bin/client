#!/usr/local/bin/node
const os = require('os')
const temp = os.tmpdir()
const home = os.homedir()

// Directory and server ids //
const directory = `${home}/${process.env.npm_package_config_root_directory}`
const identities = ['file-server','directory-server','transactions-server']

// Custom modules //
const FileSystemAPI = require('../fs-api')(directory)
const Authentication = require('../user-authentication')

// Local storage //
const Cache = require('node-persist'); Cache.initSync({'dir': temp + '/afs-storage'})
let options = Cache.getItemSync('options')

// CLI, Auth and FileSystemClient //
const cli = require('commander')
const UserAuthState = Cache.setItemSync('options') || {}
const UserAuth = new Authentication('http://localhost:3000/api', UserAuthState)
const FSClient = new FileSystemAPI(UserAuth)

// Retrieve cached files //
let currentFiles = Cache.getItemSync('files')

// CLI Login Command //
cli.command('login <username> <username>')
.action(function(username, password){
	UserAuth.login(username, password)
	.then(()=>{
		Cache.clearSync()
		const auths = identities.map(UserAuth.connect.bind(UserAuth))
		return Promise.all(auths)
	})
	.then(()=>{
		Cache.setItemSync('options', UserAuth.state())
		console.log('Logged in!')
		console.log('Now fetching some files...')
		return FSClient.fetch()
	})
	.then((files)=>{
		console.log(`${files.length} file(s) retrieved...`)
		

		const fileMap = files.reduce((cacheFileMap, file)=>{
			cacheFileMap[file.name] = file
			return cacheFileMap
		},{})

		Cache.setItemSync('files', fileMap)
	})
	.catch((err)=>{
		console.log('Whoops! Something went wrong...')
		console.error(err)
	})
})

// CLI Open Command //
cli.command('open <file> <mode>')
.action(function(file, mode){
	const stored = currentFiles[file] || {}
	
	if(stored);
	else if(mode == 'read') {
		console.error(`file does not exist`)
		process.exit()
	}

	switch(mode){
		case 'read':
			FSClient.open(stored._id, stored.name, mode)
			.then(res=>{
				// console.log('Opening...')
			})
			.catch((err)=>{
				console.log(err)
			})
		break
		case 'write':
			const id = stored._id || null
			FSClient.open(id, file, mode)
			.then(res=>{
				// console.log('Opening...')
			})
			.catch((err)=>{
				console.log(err)
			})
		break
		default:
			console.error(`${mode} mode not recognised`)
			process.exit()
	}
})

// CLI Close Command //
cli.command('close <file> <mode>')
.action(function(file, mode){
	const stored = currentFiles[file] || {}

	if(stored);

	switch(mode){
		case 'read':
		console.log('There is no need to close after ')
		break
		case 'write':
			const id = stored._id || null
			const name = stored.name || file
			FSClient.close(id, name, mode)
			.then(res=>{
				// console.log('Closing...')	
			})
			.catch((err)=>{
				console.log(err)
			})
		break
		default:
			console.error(`${mode} mode not recognised`)
			process.exit()
	}
})

cli.command('fetch')
.action(function(){
	FSClient.fetch()
	.then(files=>{
		console.log(`${files.length} file(s) retrieved and cached...`)

		const fileMap = files.reduce((cacheFileMap, file)=>{
			cacheFileMap[file.name] = file
			return cacheFileMap
		},{})

		Cache.setItemSync('files', fileMap)
	})
	.catch(()=>{
		console.log(`Error occurred deleting ${file}.`)
	})
})


cli.command('rm <file>')
.action(function(file){
	FSClient.delete(file)
	.then(res=>res.json())
	.then((data)=>{
		console.log(`File ${file} deleted.`)
	})
	.catch(()=>{
		console.log(`Error occurred deleting ${file}.`)
	})
})

cli.command('transaction start')
.action(function(file, mode){
	FSClient.startTransaction()
	.then(res=>res.json())
	.then((data)=>{
		const {transactionId} = data
		Cache.setItemSync('transaction',transactionId)
	})
})


cli.command('transaction open <file> write')
.action(function(file, mode){
	FSClient.startTransaction()
	.then(res=>res.json())
	.then((data)=>{
		const {transactionId} = data
		Cache.setItemSync('transaction',transactionId)
	})
})

cli.command('transaction open <file> write')
.action(function(file, mode){
	const transactionId = Cache.getItemSync('transaction')
	if(transactionId);
	else{
		console.log('No transaction detected')
		return
	}

	FSClient.deleteTransaction()
	.then(res=>res.json())
	.then((data)=>{
		const {transactionId} = data
		Cache.setItemSync('transaction',transactionId)
	})
})


cli.parse(process.argv)
